import pandas as pd
from tabulate import tabulate
import seaborn as sns
import koreanize_matplotlib

dust=pd.read_excel('dust.xlsx')

# ---------------------------------------------------------------------------
## 데이터 정보 확인
print(dust.head())
print(tabulate(dust.head(),headers='keys',tablefmt='pretty'))
print('----------------------------------')
print(dust.info())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 컬럼명 변경
dust.rename(columns={'날짜':'date','아황산가스':'so2','일산화탄소':'co',
                     '오존':'o3','이산화질소':'no2'},inplace=True)
print(tabulate(dust.head(),headers='keys',tablefmt='pretty'))
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 날짜 데이터 변경
dust['date']=dust['date'].str[:10]
print(tabulate(dust.head(),headers='keys',tablefmt='pretty'))
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
## ['date'] 자료형 변경 
## object -> datetime
dust['date']=pd.to_datetime(dust['date'])
print(dust.dtypes)
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## ['date'] 컬럼에서 년도, 월, 일 추출하여 새로운 컬럼 생성
dust['year']=dust['date'].dt.year
dust['month']=dust['date'].dt.month
dust['day']=dust['date'].dt.day
print(dust.columns)

## 컬럼 순서 재정렬
dust=dust[['date','year','month','day','so2','co','o3','no2','PM10','PM2.5']]
print(dust.columns)
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 결측치 확인
print('결측치 개수 확인하기')
print(dust.isna().sum())

## 결측치를 포함하는 행 출력하기
print('결측치를 포함한 데이터 출력')
print(dust[dust.isna().any(axis=1)])
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 결측치 채우기
print('결측치 채우기')
dust.ffill(inplace=True)
print(dust.isna().sum())

## 이전 결측치의 index 다시 출력해서 확인
print(dust.loc[132:134])
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 날씨 데이터 엑셀 파일 읽기
weather=pd.read_excel('weather.xlsx')
print(tabulate(weather.head(),headers='keys', tablefmt='psql'))
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 날시 데이터 기본 정보 출력
print(weather.info())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 불필요한 컬럼 삭제 및 컬럼 이름 영문으로 변경
weather.drop(['지점','지점명'],axis=1,inplace=True)
weather.columns=['date','temp','wind','rain','humidity']
print(tabulate(weather.head(),headers='keys', tablefmt='psql'))
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## weather['date'] 에서 시간 정보 삭제 후 데이터 타입 확인
weather['date']=pd.to_datetime(weather['date'].dt.date)
print(weather.info())
print(weather.head())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 날씨 데이터 결측치 개수 확인하기
print('날씨 데이터 결측치 개수 확인하기')
print(weather.isna().sum())

print('날씨 데이터에서 결측히 포함하는 행 출력')
print(weather[weather.isna().any(axis=1)])
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 날씨 데이터 결측치 채우기
weather.ffill(inplace=True)
print(weather.isna().sum())

## 이전 결측치의 index의 값 비교
print(weather.loc[[369,565,742]])
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 강수량 데이터 변경 0 -> 0.01
print('강수량이 0인 항목을 0.01로 변경')
weather['rain']=weather['rain'].replace(0,0.01)
print(weather['rain'].value_counts())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 두 데이터를 병합하기 위한 데이터 크기 확인
print('dust,weather의 크기 확인')
print('dust.shape',dust.shape)
print('weather.shape',weather.shape)
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 미세먼지 데이터에서 공통 내용이 아닌 행 삭제
print(dust.iloc[740:])
print(weather[740:])
## 미세먼지 데이터의 index 743 삭제
dust.drop(index=743,inplace=True)
print(dust.shape)
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 데이터프레임 병합하기 merge()
print('dust,weather 데이터 프레임 merge')
merge_df=pd.merge(dust, weather, on='date')
print(merge_df.head())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 데이터 분석 DF.corr()
pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows',None)

print(merge_df.corr())
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 미세먼지와 상관관계
print('미세먼지(PM10)과 상관관계 분석')
corr=merge_df.corr()
print(corr['PM10'].sort_values(ascending=False))
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 데이터 시각화 : 히스토그램
## 각 요소별 히스토그램 작성
import matplotlib.pyplot as plt
merge_df.hist(column=['so2','co','o3','no2','PM10','PM2.5','temp','wind','rain','humidity'],
              bins=50,figsize=(20,15))
plt.show()
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 데이터 시각화 : 막대그래프
## 날짜별 PM10 농도 막대그래프


plt.figure(figsize=(15,10))
daygraph = sns.barplot(x='day',y='PM10',data=merge_df)
plt.title('날짜별 농도')
plt.show()
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
## 데이터 시각화 : 히트맵 작성
## 히트맵으로 시각화 : 상관계수가 0.3 이상인 항목과의 관계 확인
plt.figure(figsize=(15,10))
sns.heatmap(data=corr, annot=True, fmt='.2f', cmap='hot')
plt.show()